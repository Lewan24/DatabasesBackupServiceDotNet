// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modules.Backup.Infrastructure.DbContexts;

#nullable disable

namespace Modules.Backup.Infrastructure.DbContexts.Migrations
{
    [DbContext(typeof(BackupsDbContext))]
    partial class BackupsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Modules.Backup.Core.Entities.DbContext.AutomaticBackupTestConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShouldTestEveryBackup")
                        .HasColumnType("INTEGER");

                    b.Property<short>("TestFrequency")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AutomaticBackupTestConfigs");
                });

            modelBuilder.Entity("Modules.Backup.Core.Entities.DbContext.BackupSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigurationJson")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NextBackupDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Modules.Backup.Core.Entities.DbContext.BackupTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BackupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TestedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BackupsTests");
                });

            modelBuilder.Entity("Modules.Backup.Core.Entities.DbContext.DbServerConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AutoTestBackupsConfigId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackupEncryptionKeyHas")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConnectionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DbName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DbPasswd")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DbType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DbUser")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTunnelRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerHost")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<short>("ServerPort")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TunnelId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DbConnections");
                });

            modelBuilder.Entity("Modules.Backup.Core.Entities.DbContext.DbServerTunnel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocalPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrivateKeyContent")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrivateKeyPassphrase")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemoteHost")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RemotePort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerHost")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SshPort")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsePasswordAuth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DbServerTunnels");
                });

            modelBuilder.Entity("Modules.Backup.Core.Entities.DbContext.PerformedBackup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ServerConnectionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Backups");
                });

            modelBuilder.Entity("Modules.Backup.Core.Entities.DbContext.ServerBackupsConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeInDaysToHoldBackups")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Modules.Backup.Core.Entities.DbContext.ServersUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UsersServers");
                });

            modelBuilder.Entity("Modules.Backup.Core.Entities.DbContext.UserNotificationsSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyOnChanges")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyOnErrors")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyOnFailedBackups")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyOnFailedTests")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyOnSuccessfulBackup")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyOnUpdates")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UsersNotificationsSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
