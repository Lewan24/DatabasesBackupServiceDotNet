@page "/account/ConfirmPassword/{PageName}"

@using System.ComponentModel.DataAnnotations
@using Client.UI.Data.Services
@using Microsoft.AspNetCore.Authorization

@layout AuthLayout

@inject ISnackbar SnackBar
@inject AuthStateProvider Provider
@inject NavigationManager Nav

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex flex-column align-center justify-center min-vh-100 pa-4">
    <!-- Logo i nagłówek -->
    <MudPaper Class="d-flex flex-column align-center justify-center pa-6 mud-elevation-6 rounded-2xl" Style="width:100%; max-width:420px;">
        <MudImage Src="/images/logo.png" Alt="OctoBackup" Width="120" Class="mb-4" />
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-6" Color="Color.Primary">
            Potwierdź hasło
        </MudText>

        <MudText Typo="Typo.body2" Align="Align.Center" Class="mb-4" Style="@($"color: {DefaultLayout.Theme.PaletteDark.TextSecondary}")">
            Zautoryzuj się podając hasło do konta
        </MudText>

        <!-- Formularz -->
        <EditForm Model="@_confirmPasswordModel" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudStack Spacing="2">
                <MudTextField Label="Hasło"
                              Variant="Variant.Outlined"
                              FullWidth="true"
                              Disabled="@_isConfirming"
                              @bind-Value="_confirmPasswordModel.Password"
                              For="() => _confirmPasswordModel.Password"
                              InputType="InputType.Password"
                              Placeholder="Wpisz swoje hasło"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Lock"/>

                <MudCheckBox T="bool" @bind-Value="@_rememberMe" Label="Zapamiętaj mnie" />
            </MudStack>

            <!-- Akcje -->
            <MudStack Row="true" AlignItems="AlignItems.Center" JustifyContent="FlexEnd" Class="mt-4">
                @if (_isConfirming)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium"/>
                }
                else
                {
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               EndIcon="@Icons.Material.Filled.CheckCircle">
                        Potwierdź
                    </MudButton>
                }
            </MudStack>
        </EditForm>
    </MudPaper>

    <!-- Stopka -->
    <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-6" Style="@($"color: {DefaultLayout.Theme.PaletteDark.TextSecondary}")">
        © @(DateTime.Now.Year) OctoBackup. Wszystkie prawa zastrzeżone.
    </MudText>
</MudContainer>

@code {
    [Parameter] public string? PageName { get; set; }

    private readonly ConfirmPasswordModel _confirmPasswordModel = new();
    private bool _isConfirming;
    private bool _rememberMe = true;

    private async Task OnValidSubmit()
    {
        _isConfirming = true;

        if (!await Provider.TryLogin(_confirmPasswordModel.Password))
        {
            SnackBar.Add("Nieprawidłowe hasło", Severity.Error);
            _isConfirming = false;
            return;
        }

        try
        {
            await Provider.AuthorizeUser(_confirmPasswordModel.Password, rememberMe: _rememberMe);
            Nav.NavigateTo($"/{PageName?.Replace('-', '/')}");
        }
        catch (Exception e)
        {
            SnackBar.Add(e.Message, Severity.Error);
            _isConfirming = false;
        }
    }

    private sealed class ConfirmPasswordModel
    {
        [Required, MaxLength(50)]
        public string? Password { get; set; }
    }
}
