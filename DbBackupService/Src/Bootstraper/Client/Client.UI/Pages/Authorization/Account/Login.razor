@page "/account/login"

@using Blazored.LocalStorage
@using Client.UI.Data.Services
@using Modules.Auth.Shared.ActionsRequests

@layout AuthLayout

@inject NavigationManager NavigationManager
@inject AuthStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject ISnackbar SnackBar

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex flex-column align-center justify-center min-vh-100 pa-4">
    <!-- Logo i tytuł -->
    <MudPaper Class="d-flex flex-column align-center justify-center pa-6 mud-elevation-6 rounded-2xl" Style="width:100%; max-width:420px;">
        <MudImage Src="/images/logo.png" Alt="OctoBackup" Width="120" Class="mb-4" />
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-6" Color="Color.Primary">Logowanie do OctoBackup</MudText>

        <!-- Formularz -->
        <EditForm Model="@LoginRequest" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudStack Spacing="2">
                <MudTextField Label="Adres Email"
                              Variant="Variant.Outlined"
                              FullWidth="true"
                              Disabled="@_isLoggingIn"
                              @bind-Value="LoginRequest.Email"
                              For="@(() => LoginRequest.Email)"
                              Placeholder="np. j.kowalski@firma.pl"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Email"/>

                <MudTextField Label="Hasło"
                              Variant="Variant.Outlined"
                              FullWidth="true"
                              Disabled="@_isLoggingIn"
                              @bind-Value="LoginRequest.Password"
                              For="@(() => LoginRequest.Password)"
                              InputType="InputType.Password"
                              Placeholder="Wpisz hasło"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Lock"/>

                <MudCheckBox T="bool" @bind-Value="@LoginRequest.RememberMe" Label="Zapamiętaj mnie" />
            </MudStack>

            <!-- Akcje -->
            <MudStack Row="true" AlignItems="AlignItems.Center" JustifyContent="SpaceBetween" Class="mt-4">
                <MudButton Variant="Variant.Text"
                           Color="Color.Secondary"
                           Disabled="@_isLoggingIn"
                           Href="/account/register"
                           StartIcon="@Icons.Material.Filled.PersonAdd">
                    Zarejestruj się
                </MudButton>

                @if (_isLoggingIn)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium"/>
                }
                else
                {
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               EndIcon="@Icons.Material.Filled.Login">
                        Zaloguj się
                    </MudButton>
                }
            </MudStack>
        </EditForm>
    </MudPaper>

    <!-- Stopka -->
    <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-6" Style="@($"color: {DefaultLayout.Theme.PaletteDark.TextSecondary}")">
        © @(DateTime.Now.Year) OctoBackup. Wszystkie prawa zastrzeżone.
    </MudText>
</MudContainer>

@code {
    LoginRequest LoginRequest { get; } = new();
    bool _isLoggingIn;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthStateProvider.IsUserAuthenticated();
        if (isAuthenticated)
        {
            NavigationManager.NavigateTo("/", false);
            return;
        }

        LoginRequest.Email = (await LocalStorage.GetItemAsync<string>("User"))!;
        await LocalStorage.RemoveItemAsync("User");
    }

    private async Task OnValidSubmit()
    {
        _isLoggingIn = true;

        var loginResult = await AuthStateProvider.Login(LoginRequest);

        if (!loginResult.Success)
        {
            SnackBar.Add(loginResult.Msg!, Severity.Error);
            _isLoggingIn = false;
            return;
        }

        await AuthStateProvider.AuthorizeUser(LoginRequest.Password, rememberMe: LoginRequest.RememberMe);
        NavigationManager.NavigateTo("/", false);
    }
}
