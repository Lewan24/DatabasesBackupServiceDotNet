@using Modules.Backup.Shared.Dtos

<MudDialog>
    <DialogContent>
        <MudStack Spacing="3">
            <MudTextField Label="Schedule name"
                          @bind-Value="_model.Name"
                          Required="true"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Edit" />

            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudSwitch @bind-Value="_model.IsEnabled" Color="Color.Success" />
                <MudText Typo="Typo.body1">@(_model.IsEnabled ? "Enabled" : "Disabled")</MudText>
            </MudStack>

            <MudPaper Class="pa-3 rounded-lg">
                <MudText Typo="Typo.subtitle2" Class="mb-2">Days</MudText>

                <MudSelect T="DayOfWeek"
                           Label="Pick days"
                           @bind-SelectedValues="SelectedDays"
                           MultiSelection="true"
                           Variant="Variant.Outlined"
                           Dense="true">
                    @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
                    {
                        <MudSelectItem Value="@day">@day</MudSelectItem>
                    }
                </MudSelect>

                <MudStack Row="true" Wrap="Wrap.Wrap" Spacing="1" Class="mt-2">
                    @foreach (var d in _model.SelectedDays.OrderBy(x => ((int) x + 6) % 7)
                                  .ToList())
                    {
                        <MudChip T="DayOfWeek"
                                 Value="@d"
                                 Variant="Variant.Outlined"
                                 OnClose="@OnDayChipClose">
                            @d.ToString()
                        </MudChip>
                    }
                </MudStack>
            </MudPaper>

            <MudPaper Class="pa-3 rounded-lg">
                <MudText Typo="Typo.subtitle2" Class="mb-2">Times</MudText>

                <MudSelect T="TimeOnly"
                           Label="Pick times"
                           @bind-SelectedValues="SelectedTimes"
                           MultiSelection="true"
                           Variant="Variant.Outlined"
                           Dense="true">
                    @for (int h = 0; h < 24; h++)
                    {
                        for (int m = 0; m < 60; m += 30)
                        {
                            var time = new TimeOnly(h, m);
                            <MudSelectItem Value="@time">@time.ToString("HH:mm")</MudSelectItem>
                        }
                    }
                </MudSelect>

                <MudStack Row="true" Wrap="Wrap.Wrap" Spacing="1" Class="mt-2">
                    @foreach (var t in _model.SelectedTimes.OrderBy(x => x).ToList())
                    {
                        <MudChip T="TimeOnly"
                                 Value="@t"
                                 Variant="Variant.Outlined"
                                 OnClose="@OnTimeChipClose">
                            @t.ToString("HH:mm")
                        </MudChip>
                    }
                </MudStack>
            </MudPaper>
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public BackupsScheduleDto? Schedule { get; set; }

    private BackupsScheduleDto _model = new();

    // wrappers dla MultiSelection
    private IEnumerable<DayOfWeek> SelectedDays
    {
        get => _model.SelectedDays;
        set => _model.SelectedDays = value.ToList();
    }

    private IEnumerable<TimeOnly> SelectedTimes
    {
        get => _model.SelectedTimes;
        set => _model.SelectedTimes = value.ToList();
    }

    protected override void OnInitialized()
    {
        if (Schedule != null)
        {
            _model = new BackupsScheduleDto
            {
                Id = Schedule.Id,
                Name = Schedule.Name,
                IsEnabled = Schedule.IsEnabled,
                SelectedDays = Schedule.SelectedDays.ToList(),
                SelectedTimes = Schedule.SelectedTimes.ToList(),
                DbConnectionId = Schedule.DbConnectionId,
                ServerName = Schedule.ServerName
            };
        }
    }

    private Task OnDayChipClose(MudChip<DayOfWeek> chip)
    {
        _model.SelectedDays.Remove(chip.Value);
        return Task.CompletedTask;
    }

    private Task OnTimeChipClose(MudChip<TimeOnly> chip)
    {
        _model.SelectedTimes.Remove(chip.Value);
        return Task.CompletedTask;
    }

    void Save() => MudDialog.Close(DialogResult.Ok(_model));
    void Cancel() => MudDialog.Cancel();
}
