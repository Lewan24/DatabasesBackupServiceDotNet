@page "/schedules"

@using Client.UI.Data.Services
@using Client.UI.Pages.BackupsModule.Dialogs.Schedule
@using Modules.Backup.Shared.Dtos
@using Modules.Backup.Shared.Helpers
@using OneOf.Types

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject BackupsHttpClientService Service

<PageTitle>Backup Schedules</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-6">
    <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-6">Backup Schedules</MudText>

    <MudPaper Class="pa-4 mud-elevation-2 rounded-2xl">
        <MudStack Row="true" Justify="Justify.FlexStart" Class="mb-4">
            <MudText Typo="Typo.h6">Schedules list</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                       OnClick="OpenNewScheduleDialog">New Schedule</MudButton>
        </MudStack>

        <MudTable Items="@_schedules" Hover="true" Dense="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Server</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Next Backup</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.ServerName</MudTd>
                <MudTd>
                    @if (context.IsEnabled)
                    {
                        <MudChip T="string" Color="Color.Success" Variant="Variant.Outlined">Enabled</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Error" Variant="Variant.Outlined">Disabled</MudChip>
                    }
                    
                    <MudTooltip Delay="100" Text="@(context.IsEnabled ? "Disable" : "Enable")">
                        <MudIconButton Color="Color.Secondary" Size="Size.Small" Icon="@Icons.Material.Filled.ChangeCircle" Class="ml-3" Variant="Variant.Filled" />
                    </MudTooltip>
                </MudTd>
                <MudTd>@GetNextBackup(context)</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning"
                                   OnClick="() => OpenEditScheduleDialog(context)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                   OnClick="() => DeleteSchedule(context.Id)" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private List<BackupsScheduleDto> _schedules = new();
    private List<ServerNameIdDto> _availableServers = new();
    
    protected override async Task OnInitializedAsync()
    {
        await FetchSchedules();

        var getAvailableServersResult = await Service.GetServersNamesForSchedulesAsync();
        getAvailableServersResult.Switch(
            list => _availableServers = list,
            error => Snackbar.Add(error, Severity.Error)
        );
    }

    private async Task FetchSchedules()
    {
        var getSchedulesResult = await Service.GetSchedulesAsync();
        getSchedulesResult.Switch(
            list => _schedules = list,
            error => Snackbar.Add(error, Severity.Error)
        );
        
        StateHasChanged();
    }

    private async Task DeleteSchedule(Guid id)
    {
        var result = await Service.DeleteScheduleAsync(id);
        
        result.Switch(
            async void (_) =>
            {
                Snackbar.Add("Successfully removed schedule.", Severity.Success);
                await FetchSchedules();
            },
            error => Snackbar.Add(error, Severity.Error)
        );
    }

    private string GetNextBackup(BackupsScheduleDto schedule)
    {
        if (!schedule.SelectedDays.Any() || !schedule.SelectedTimes.Any())
            return "-";

        var now = DateTime.Now;
        var candidates = schedule.SelectedDays
            .SelectMany(d => schedule.SelectedTimes, (day, time) => BackupScheduleHelper.GetNextDateTime(day, time, now))
            .ToList();

        return candidates.Min().ToString("g");
    }

    private async Task OpenNewScheduleDialog()
    {
        var parameters = new DialogParameters<BackupScheduleDialog>
        {
            { x => x.AvailableServers, _availableServers }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        
        var dialog = await DialogService.ShowAsync<BackupScheduleDialog>("New Schedule", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is BackupsScheduleDto dto)
        {
            var createScheduleResult = await Service.CreateScheduleAsync(dto);
            
            createScheduleResult.Switch(
                async void (_) =>
                {
                    Snackbar.Add("Successfully created schedule.", Severity.Success);
                    await FetchSchedules();
                },
                error => Snackbar.Add(error, Severity.Error)
            );
        }
    }

    private async Task OpenEditScheduleDialog(BackupsScheduleDto schedule)
    {
        var parameters = new DialogParameters<BackupScheduleDialog>
        {
            { x => x.Schedule, schedule },
            { x => x.AvailableServers, _availableServers}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        
        var dialog = await DialogService.ShowAsync<BackupScheduleDialog>("Edit Schedule", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is BackupsScheduleDto dto)
        {
            var editScheduleResult = await Service.EditScheduleAsync(dto);
            
            editScheduleResult.Switch(
                async void (_) =>
                {
                    Snackbar.Add("Successfully edited schedule.", Severity.Success);
                    await FetchSchedules();
                },
                error => Snackbar.Add(error, Severity.Error)
            );
        }
    }
}
