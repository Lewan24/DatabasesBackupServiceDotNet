@page "/servers"

@using Client.UI.Data.Services
@using Client.UI.Pages.BackupsModule.Dialogs.Servers
@using Microsoft.AspNetCore.SignalR.Client
@using Modules.Backup.Shared.Dtos
@using Modules.Backup.Shared.Hubs

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject BackupsHttpClientService Service
@inject NavigationManager Nav
@inject AuthStateProvider Auth

@implements IDisposable

<PageTitle>Servers</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-6">
    <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-6">Moje serwery</MudText>

    <MudPaper Class="pa-4 mud-elevation-2 rounded-2xl">
        <MudStack Row="true" Class="mb-4">
            <MudText Typo="Typo.h6">Lista serwerów</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                       OnClick="OpenCreateNewServerDialog">Add server</MudButton>
        </MudStack>

        <MudTable Items="@_servers" Hover="true" Dense="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Host</MudTh>
                <MudTh>Database</MudTh>
                <MudTh>Tunnel Status</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Operations</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.ConnectionName</MudTd>
                <MudTd DataLabel="Host">@context.ServerHost:@context.ServerPort</MudTd>
                <MudTd DataLabel="Database">@context.DbName:@context.DbUser</MudTd>
                <MudTd DataLabel="Tunnel Status">
                    @if (context.IsTunnelRequired)
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Success">Enabled</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Error">Disabled</MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Type">@context.DbType</MudTd>
                <MudTd DataLabel="Operations" Class="d-flex flex-row flex-nowrap justify-center gap-1 align-center">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="@(() => OpenEditServerDialog(context))" />
                    <MudTooltip Delay="100" Text="Disable server">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DisableServer(context.Id))" />
                    </MudTooltip>
                    <MudMenu>
                        <ActivatorContent>
                            <MudIconButton Icon="@Icons.Material.Filled.Menu" />
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem>Test Connection</MudMenuItem>
                            <MudMenuItem>Perform Backup</MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="@([10, 25, 50, 100])" />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private List<ServerConnectionDto> _servers = new();

    private HubConnection? _hubConnection;
    
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(
                await Auth.AuthorizeUser(returnPageAfterValidPasswordAuthorization: "servers")))
            return;
        
        await FetchServers();

        _hubConnection = BackupHubHelper.GetBasicHubConnection(Nav.ToAbsoluteUri(BackupHubHelper.HubUrl));
        
        _hubConnection.On<string>(BackupHubHelper.Events.ServerCreatedEvent.ToString(), (userName) =>
        {
            var currentUserName = Auth.GetAuthenticationStateAsync().Result.User.Identity?.Name;
            
            if (currentUserName!.Equals(userName, StringComparison.OrdinalIgnoreCase))
                InvokeAsync(FetchServers);
        });
        _hubConnection.On<Guid>(BackupHubHelper.Events.ServerHasChangedEvent.ToString(), (id) =>
        {
            if (_servers.FirstOrDefault(x => x.Id == id) is not null)
                InvokeAsync(FetchServers);
        });

        await _hubConnection.StartAsync();
    }

    private async Task FetchServers()
    {
        var result = await Service.GetServersAsync();
        
        result.Switch(
            servers => _servers = servers,
            error => Snackbar.Add(error, Severity.Error)
        );
        
        StateHasChanged();
    }

    private async Task DisableServer(Guid id)
    {
        var result = await Service.ToggleServerDisabledStatus(id);
        
        result.Switch(
            success => _ = FetchServers(),
            error => Snackbar.Add(error, Severity.Error)
        );
    }
    
    private async Task OpenEditServerDialog(ServerConnectionDto server)
    {
        var dialogParameters = new DialogParameters<EditServerDialog>
        {
            { x => x.Server, server with{} }
        };
        
        var dialog = await DialogService.ShowAsync<EditServerDialog>($"Edit server {server.ConnectionName}", parameters: dialogParameters);
        
        var dialogResult = await dialog.Result;

        if (dialogResult is not null && !dialogResult.Canceled)
            await FetchServers();
    }

    private async Task OpenCreateNewServerDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateServerDialog>("Create new server");
        
        var dialogResult = await dialog.Result;

        if (dialogResult is not null && !dialogResult.Canceled)
            await FetchServers();
    }

    public void Dispose()
    {
        _hubConnection?.DisposeAsync();
    }

}