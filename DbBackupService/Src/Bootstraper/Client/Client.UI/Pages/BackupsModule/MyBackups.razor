@page "/backups"

@using Client.UI.Data.Services
@using Modules.Backup.Shared.Dtos

@inject AuthStateProvider Auth

<PageTitle>Backups</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-6">
    <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-6">Podgląd backupów</MudText>

    <MudPaper Class="pa-4 mud-elevation-2 rounded-2xl">
        <MudStack Row="true" JustifyContent="SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
            <MudText Typo="Typo.h6">Lista wykonanych backupów</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">
                Nowy backup
            </MudButton>
        </MudStack>

        <MudTable Items="@_backups" Hover="true" Dense="true">
            <HeaderContent>
                <MudTh>Nazwa</MudTh>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<PerformedBackupDto, object>(x => x.CreatedOn)">Utworzono</MudTableSortLabel></MudTh>
                <MudTh>Plik</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<PerformedBackupDto, object>(x => x.Test?.IsSuccess)">Status testu</MudTableSortLabel></MudTh>
                <MudTh>Akcje</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.CreatedOn.ToString("g")</MudTd>
                <MudTd>@context.FilePath</MudTd>
                @{
                    <MudTd>
                        @if (context.Test is not null)
                        {
                            if (context.Test.IsSuccess)
                            {
                                <MudChip T="string" Color="Color.Success" Variant="Variant.Filled">OK</MudChip>
                            }
                            else
                            {
                                <MudTooltip Text="@context.Test.ErrorMessage" Delay="100">
                                    <MudChip T="string" Color="Color.Error" Variant="Variant.Filled">Błąd</MudChip>
                                </MudTooltip>
                            }
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Info" Variant="Variant.Outlined">Nie testowano</MudChip>
                        }
                    </MudTd>
                    
                    <MudTd>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.PlayArrow" Disabled="@((context.Test?.IsSuccess ?? true) && context.Test is not null)">
                            @switch (context.Test?.IsSuccess)
                            {
                                case true:
                                    <span>Poprawnie przetestowano</span>
                                    break;
                                    
                                case false:
                                    <span>Ponów test</span>
                                    break;
                                    
                                default:
                                    <span>Testuj backup</span>
                                    break;
                            }
                        </MudButton>
                    </MudTd>
                }
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="@([25, 50, 100])" />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private List<PerformedBackupDto> _backups = new()
    {
        new() { Test = new BackupTestDto{IsSuccess = true, TestedOn = DateTime.Now}, Name = "Daily app backup", CreatedOn = DateTime.Now.AddDays(-1), FilePath = "/backups/db1.sql" },
        new() { Test = new BackupTestDto{IsSuccess = false, TestedOn = DateTime.Now.AddDays(-2), ErrorMessage = "Can't connect to server"}, Name = "Daily localhost", CreatedOn = DateTime.Now.AddDays(-4), FilePath = "/backups/db2.sql" },
        new() { Name = "Daily Domain", CreatedOn = DateTime.Now.AddDays(-16), FilePath = "/backups/db3.sql" },
        new() { Test = new BackupTestDto{IsSuccess = true, TestedOn = DateTime.Now.AddDays(-11)}, Name = "Daily Test", CreatedOn = DateTime.Now.AddDays(-12), FilePath = "/backups/db4.sql" }
    };

    protected override async Task OnInitializedAsync()
    {
        await Auth.AuthorizeUser(returnPageAfterValidPasswordAuthorization: "backups");
    }

}
