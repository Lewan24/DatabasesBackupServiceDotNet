@using Client.UI.Data.Services
@using Modules.Auth.Shared.ActionsRequests
@inject AuthStateProvider AuthStateProvider
@inject ISnackbar SnackBar

<MudDialog>
    <DialogContent>
        <EditForm Model="_request" OnValidSubmit="Save"
                  OnInvalidSubmit="@(() => SnackBar.Add("Please check your data", Severity.Warning))">
            <DataAnnotationsValidator/>

            <MudCard Elevation="4" Class="pa-4 rounded-2xl mb-5">
                <MudCardContent>
                    <MudGrid Spacing="3">
                        <MudItem xs="12">
                            <MudTextField Label="Email Address"
                                          Variant="Variant.Outlined"
                                          Disabled="@_isSaving"
                                          InputType="InputType.Email"
                                          InputMode="InputMode.email"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Email"
                                          @bind-Value="_request.Email"
                                          For="@(() => _request.Email)"/>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudTextField Label="Password"
                                          Variant="Variant.Outlined"
                                          Disabled="@_isSaving"
                                          InputType="InputType.Password"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Lock"
                                          @bind-Value="_request.Password"
                                          For="@(() => _request.Password)"/>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudTextField Label="Confirm Password"
                                          Variant="Variant.Outlined"
                                          Disabled="@_isSaving"
                                          InputType="InputType.Password"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.LockReset"
                                          @bind-Value="_request.PasswordConfirm"
                                          For="@(() => _request.PasswordConfirm)"/>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>

            <MudContainer Class="d-flex justify-between pa-4">
                <MudButton OnClick="Cancel" Variant="Variant.Text" Color="Color.Default" Disabled="@_isSaving">
                    Cancel
                </MudButton>

                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    @if (_isSaving)
                    {
                        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Small"/>
                    }
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                               Color="Color.Success" Disabled="@_isSaving">
                        Create
                    </MudButton>
                </MudStack>
            </MudContainer>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    private bool _isSaving;

    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = null!;

    private readonly RegisterRequest _request = new();

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Save()
    {
        _isSaving = true;

        var result = await AuthStateProvider.Register(_request);

        if (!result.Success)
        {
            SnackBar.Add(result.Msg ?? "Unexpected error", Severity.Error);
            _isSaving = false;
            return;
        }

        MudDialog.Close(DialogResult.Ok(true));
        _isSaving = false;
    }

}
