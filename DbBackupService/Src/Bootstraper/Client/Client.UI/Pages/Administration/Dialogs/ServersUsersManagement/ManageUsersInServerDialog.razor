@using Client.UI.Data.Services
@using Modules.Backup.Shared.Requests
@inject IDialogService DialogService
@inject AdministrationHttpService Service
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudPaper Class="pa-4 rounded-2xl mud-elevation-1">
            <MudTable Items="@_usersWithAccess" Hover="true" Dense="true" Bordered="false">
                <HeaderContent>
                    <MudTh>User</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="User">@context</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudTooltip Text="Remove user access">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           OnClick="@(() => RemoveUserFromServer(context))"/>
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>

        <MudContainer Class="d-flex justify-end mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddUserDialog">
                Add User
            </MudButton>
        </MudContainer>
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public Guid ServerId { get; set; }

    private List<string> _usersWithAccess = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchUsers();
    }

    private async Task FetchUsers()
    {
        var result = await Service.GetUsersThatAccessServer(ServerId);

        result.Switch(
            list => _usersWithAccess = list,
            error => Snackbar.Add(error, Severity.Error)
        );

        StateHasChanged();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task RemoveUserFromServer(string email)
    {
        var result = await Service.RemoveUserAccessFromServer(new ModifyServerAccessRequest(ServerId, email));

        result.Switch(
            success => _ = FetchUsers(),
            error => Snackbar.Add(error, Severity.Error)
        );
    }

    private async Task OpenAddUserDialog()
    {
        var parameters = new DialogParameters<AddUserToServerDialog> { { x => x.ServerId, ServerId } };
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AddUserToServerDialog>("Give access to server for user", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is string addedUser)
        {
            var giveAccessResult = await Service.GiveUserAccessToServer(new ModifyServerAccessRequest(ServerId, addedUser));

            giveAccessResult.Switch(
                success => _ = FetchUsers(),
                error => Snackbar.Add(error, Severity.Error)
            );
        }
    }

}
