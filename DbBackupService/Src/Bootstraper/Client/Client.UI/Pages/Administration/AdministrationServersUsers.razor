@page "/administration/serversusers"

@using Client.UI.Data.Services
@using Client.UI.Pages.Administration.Dialogs.ServersUsersManagement
@using Modules.Backup.Shared.Dtos

@inject AdministrationHttpService AdminService
@inject BackupsHttpClientService BackupService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthStateProvider Auth

<PageTitle>Manage Users in Servers</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-6">
    <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-6">Manage users in servers</MudText>

    <MudPaper Class="pa-4 mud-elevation-2 rounded-2xl">
        <MudStack Row="true" JustifyContent="SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
            <MudText Typo="Typo.h6">Servers</MudText>
        </MudStack>

        <MudTable Items="@_serversUsers" Hover="true" Bordered="false" Dense="true">
            <HeaderContent>
                <MudTh>Server Id</MudTh>
                <MudTh>Server Name</MudTh>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<ServersUsersListDto, object>(x => x.IsServerDisabled)">Status</MudTableSortLabel></MudTh>
                <MudTh>Users with Access</MudTh>
                <MudTh>Operations</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">
                    <MudTooltip Delay="100" Text="@context.ServerId.ToString()">
                        @context.ServerId.ToString()[..12]...
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="Name">@context.ServerConnectionName</MudTd>
                <MudTd DataLabel="Status">
                    @if (context.IsServerDisabled)
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Error">Disabled</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Success">Enabled</MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Access">@context.UsersWithAccess users</MudTd>
                <MudTd>
                    <MudTooltip Delay="100" Text="Toggle server status">
                        <MudIconButton Icon="@Icons.Material.Filled.ChangeCircle" Color="Color.Secondary" OnClick="@(() => ToggleServerStatus(context.ServerId))" />
                    </MudTooltip>
                    <MudTooltip Delay="100" Text="Manage users that access this server">
                        <MudIconButton Icon="@Icons.Material.Filled.People" Color="Color.Primary" OnClick="@(() => OpenManageUsersDialog(context))"/>
                    </MudTooltip>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="@([10, 25, 50])" />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private List<ServersUsersListDto> _serversUsers = new();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(
                await Auth.AuthorizeUser(returnPageAfterValidPasswordAuthorization: "administration-serversusers")))
            return;
        
        await FetchServersUsers();
    }

    private async Task ToggleServerStatus(Guid serverId)
    {
        var result = await BackupService.ToggleServerDisabledStatus(serverId);
        
        result.Switch(
            success => _ = FetchServersUsers(),
            error => Snackbar.Add(error, Severity.Error)
        );
    }

    private async Task FetchServersUsers()
    {
        var result = await AdminService.FetchServersUsers();
        
        result.Switch(
            serversUsers => _serversUsers = serversUsers,
            error => Snackbar.Add(error, Severity.Error)
        );
        
        StateHasChanged();
    }
    
    private async Task OpenManageUsersDialog(ServersUsersListDto server)
    {
        var parameters = new DialogParameters<ManageUsersInServerDialog> { {x => x.ServerId, server.ServerId} };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };

        await DialogService.ShowAsync<ManageUsersInServerDialog>($"Manage users access to server {server.ServerConnectionName}", parameters, options);
    }
}