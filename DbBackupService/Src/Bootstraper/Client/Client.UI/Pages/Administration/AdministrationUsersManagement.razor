@page "/administration/users"

@using Client.UI.Data.Services
@using Client.UI.Pages.Administration.Dialogs
@using Modules.Auth.Shared.ActionsRequests
@using Modules.Auth.Shared.Dtos

@inject AdministrationHttpService Service
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Manage Users</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-6">
    <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-6">Zarządzanie użytkownikami</MudText>

    <MudPaper Class="pa-4 mud-elevation-2 rounded-2xl">
        <MudStack Row="true" JustifyContent="SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
            <MudText Typo="Typo.h6">Lista użytkowników</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PersonAdd"
                       OnClick="OpenCreateNewUserDialog">
                Dodaj użytkownika
            </MudButton>
        </MudStack>

        <!-- Tabela użytkowników -->
        <MudTable Items="@_users" Hover="true" Bordered="false" Dense="true">
            <HeaderContent>
                <MudTh>Email</MudTh>
                <MudTh>Blocked</MudTh>
                <MudTh>Email Status</MudTh>
                <MudTh>Role</MudTh>
                <MudTh>Akcje</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Blocked">
                    @if (!context.IsBlocked)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                                   StartIcon="@Icons.Material.Filled.Block"
                                   OnClick="@(() => ToggleBlock(context.Id.ToString()))">
                            Zablokuj
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small"
                                   StartIcon="@Icons.Material.Filled.LockOpen"
                                   OnClick="@(() => ToggleBlock(context.Id.ToString()))">
                            Odblokuj
                        </MudButton>
                    }
                </MudTd>
                <MudTd DataLabel="Email Status">
                    @if (context.IsEmailConfirmed)
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Success">Confirmed</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Error">Not Confirmed</MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Role">@string.Join(", ", context.Roles!)</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" OnClick="@(() => OpenEditUserDialog(context))" Color="Color.Warning"/>
                </MudTd>
            </RowTemplate>
            
            <PagerContent>
                <MudTablePager PageSizeOptions="@([10, 25, 50, 100])" />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private List<UserDto> _users = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchUsers();
    }

    private async Task FetchUsers()
    {
        var getUsersResult = await Service.GetUsersList();

        getUsersResult.Switch(
            users => _users = users,
            error => Snackbar.Add(error, Severity.Error)
        );
        
        StateHasChanged();
    }

    private async Task ToggleBlock(string userId)
    {
        var result = await Service.ToggleUserBlockade(userId);
        
        result.Switch(
            async void (_) => await FetchUsers(),
            error => Snackbar.Add(error, Severity.Error)
        );
    }

    private async Task OpenEditUserDialog(UserDto user)
    {
        var dialogParameters = new DialogParameters<EditUserDialog>
        {
            {
                x => x.User, new EditUserRequest
                {
                    Id = user.Id.ToString(),
                    Email = user.Email,
                    Password = "",
                    ConfirmPassword = ""
                }
            }
        };
        
        var dialog = await DialogService.ShowAsync<EditUserDialog>($"Edit user {user.Email}", parameters: dialogParameters);
        
        var dialogResult = await dialog.Result;

        if (dialogResult is not null && !dialogResult.Canceled)
            await FetchUsers();
    }

    private async Task OpenCreateNewUserDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateNewUserDialog>("Create new User");
        
        var dialogResult = await dialog.Result;

        if (dialogResult is not null && !dialogResult.Canceled)
            await FetchUsers();
    }
}